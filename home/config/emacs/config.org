#+TITLE: My Emacs Configuration
#+PROPERTY: header-args :tangle (expand-file-name "emacs/init.el" (getenv "XDG_CONFIG_HOME"))

* Start up
Check if emacs is run in a nix-managed environment.
#+begin_src emacs-lisp
  (defun nixp ()
    "Return t if emacs is installed with nix."
    (string-prefix-p "/nix/store/" invocation-directory))
#+end_src

Make sure emacs will find the right user directory.
#+begin_src emacs-lisp
  (setq user-emacs-directory
        (if (nixp)
            (expand-file-name "emacs" (getenv "XDG_CONFIG_HOME"))
          "~/.emacs.d"))
#+end_src

Load ~use-package~.
#+begin_src emacs-lisp
  (unless (nixp)
    (require 'package)

    (if (eq system-type 'windows-nt)
        (add-to-list 'package-archives
                     '("melpa" . "http://melpa.org/packages/") t)
      (add-to-list 'package-archives
                   '("melpa" . "https://melpa.org/packages/") t))
    (package-initialize)

    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package)))

  (eval-when-compile
    (require 'use-package))

  (require 'bind-key)
  (require 'diminish)
#+end_src

Eagerly load packages with ~use-package~ if emacs is started as a daemon.
#+begin_src emacs-lisp
  (when (daemonp)
    (setq use-package-always-demand t))
#+end_src

* General configuration
#+begin_src emacs-lisp
  (use-package emacs
    :preface
    (defun my/setup-fonts ()
      (set-fontset-font t
                        nil
                        "Iosevka")
      (set-fontset-font t
                        'japanese-jisx0213.2004-1
                        "Sarasa Mono J")
      (set-fontset-font "fontset-standard"
                        nil
                        "Iosevka Aile")
      (set-fontset-font "fontset-standard"
                        'japanese-jisx0213.2004-1
                        "Sarasa UI J")
      (set-face-attribute 'default nil :fontset "fontset-default" :height 120)
      (set-face-attribute 'fixed-pitch nil :fontset "fontset-default" :height 1.0)
      (set-face-attribute 'variable-pitch nil :fontset "fontset-standard" :height 1.0))
    :custom
    ;; C source code
    (ring-bell-function 'ignore)
    (scroll-margin 5)
    (scroll-conservatively 100)

    (use-short-answers t)

    ;; files.el
    (auto-save-file-name-transforms `((".*" ,(expand-file-name "auto-save" user-emacs-directory) t)))
    (backup-directory-alist `((".*" . ,(expand-file-name "backup" user-emacs-directory))))
    (require-final-newline t)
    (scroll-preserve-screen-position t)

    ;; simple.el
    (indent-tabs-mode nil)

    :custom-face
    (region ((t (:foreground unspecified))))

    :config
    ;; frame.el
    (blink-cursor-mode -1)

    ;; menu-bar.el
    (menu-bar-mode -1)

    ;; scroll-bar.el
    (scroll-bar-mode -1)

    ;; simple.el
    (column-number-mode)
    (global-visual-line-mode)
    (line-number-mode)

    ;; tool-bar.el
    (tool-bar-mode -1)

    (make-directory (expand-file-name "auto-save" user-emacs-directory) t)
    (make-directory (expand-file-name "backup" user-emacs-directory) t)

    (if (daemonp)
        (add-hook 'server-after-make-frame-hook #'my/setup-fonts)
      (when (display-graphic-p)
        (my/setup-fonts))))
#+end_src

* Packages
** ~autorevert~
#+begin_src emacs-lisp
  (use-package autorevert
    :ensure nil
    :config
    (global-auto-revert-mode))
#+end_src

** ~avy~
#+begin_src emacs-lisp
  (use-package avy
    :bind ("C-x j" . avy-goto-char-timer)
    :custom
    (avy-timeout-seconds 0.75))
#+end_src

** ~beacon~
#+begin_src emacs-lisp
  (use-package beacon
    :commands (beacon-mode beacon-blink)
    :config
    (add-to-list 'beacon-dont-blink-major-modes 'comint-mode)
    (add-to-list 'beacon-dont-blink-major-modes 'dashboard-mode)
    (add-to-list 'beacon-dont-blink-major-modes 'eshell-mode)
    (add-to-list 'beacon-dont-blink-major-modes 'eat-mode))
#+end_src

** ~cape~
#+begin_src emacs-lisp
  (use-package cape
    :init
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-elisp-block))
#+end_src

** ~cmake-mode~
#+begin_src emacs-lisp
  (use-package cmake-mode
    :mode ("CMakeLists\\.txt\\'"
           "\\.cmake\\'"))
#+end_src

** ~consult~
#+begin_src emacs-lisp
  (use-package consult
    :bind (;; C-c bindings in `mode-specific-map'
           ("C-c M-x" . consult-mode-command)
           ("C-c h" . consult-history)
           ("C-c k" . consult-kmacro)
           ("C-c m" . consult-man)
           ("C-c i" . consult-info)
           ([remap Info-search] . consult-info)
           ;; C-x bindings in `ctl-x-map'
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ;; M-g bindings in `goto-map'
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings in `search-map'
           ("M-s d" . consult-find)
           ("M-s D" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    :custom
    (consult-narrow-key "<")
    (consult-project-function #'consult--default-project-function)

    :init
    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any)))
#+end_src

** ~corfu~
#+begin_src emacs-lisp
  (use-package corfu
    :preface
    (defun corfu-send-shell (&rest _)
      "Send completion candidate when inside comint/eshell."
      (cond
       ((and (derived-mode-p 'eshell-mode) (fboundp 'eshell-send-input))
        (eshell-send-input))
       ((and (derived-mode-p 'comint-mode)  (fboundp 'comint-send-input))
        (comint-send-input))))
    :custom
    (corfu-auto t)
    (corfu-cycle t)
    (corfu-quit-no-match 'separator)
    :init
    (add-hook 'eshell-mode-hook (lambda ()
                                  (setq corfu-auto nil)
                                  (corfu-mode)))
    :config
    (advice-add #'corfu-insert :after #'corfu-send-shell)
    (global-corfu-mode))

  (use-package emacs
    :custom
    (completion-cycle-threshold 3)
    (tab-always-indent 'complete))
#+end_src

** ~css-mode~
#+begin_src emacs-lisp
  (use-package css-mode
    :ensure nil
    :mode "\\.css\\'"
    :init
    (when (treesit-language-available-p 'css)
      (add-to-list 'major-mode-remap-alist '(css-mode . css-ts-mode))))
#+end_src

** ~csv-mode~
#+begin_src emacs-lisp
  (use-package csv-mode
    :mode (("\\.csv\\'" . csv-mode)
           ("\\.tsv\\'" . tsv-mode)))
#+end_src

** ~c-ts-mode~
#+begin_src emacs-lisp
  (use-package cc-mode
    :ensure nil
    :commands (c-ts-mode c++-ts-mode)
    :custom
    (c-ts-mode-hook c-mode-hook)
    (c++-ts-mode-hook c++-mode-hook)
    :init
    (when (treesit-language-available-p 'c)
      (add-to-list 'major-mode-remap-alist '(c-mode . c-ts-mode)))
    (when (treesit-language-available-p 'cpp)
      (add-to-list 'major-mode-remap-alist '(c++-mode . c++-ts-mode))))
#+end_src

** ~cus-edit~
#+begin_src emacs-lisp
  (use-package cus-edit
    :ensure nil
    :custom
    (custom-file (expand-file-name "custom-file.el" user-emacs-directory))
    :config
    (load custom-file t))
#+end_src

** ~dashboard~
#+begin_src emacs-lisp
  (use-package dashboard
    :demand t
    :bind (:repeat-map dashboard-line-navigation-repeat-map
                       ("n" . dashboard-next-line)
                       ("p" . dashboard-previous-line))
    :custom
    (dashboard-center-content t)
    (dashboard-set-footer nil)
    (dashboard-set-init-info nil)
    (dashboard-projects-backend 'project-el)
    (dashboard-items '((recents . 5)
                       (bookmarks . 5)
                       (projects . 5)
                       (agenda . 5)))
    :init
    ;; Display the dashboard in new emacsclient frames.
    (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
    :config
    (dashboard-setup-startup-hook))
#+end_src

** ~diff-hl~
#+begin_src emacs-lisp
  (use-package diff-hl
    :hook ((magit-pre-refresh . diff-hl-magit-pre-refresh)
           (magit-post-refresh . diff-hl-magit-post-refresh)
           (dired-mode . diff-hl-dired-mode)
           (conf-mode . diff-hl-margin-mode)
           (prog-mode . diff-hl-margin-mode)
           (text-mode . diff-hl-margin-mode))
    :custom
    ;; (diff-hl-margin-symbols-alist `((insert . ,(string #x2503)) ; U+2503
    ;;                                 (delete . ,(string #x2503))
    ;;                                 (change . ,(string #x2503))
    ;;                                 (unknown . "?")
    ;;                                 (ignored . "!")))
    (diff-hl-margin-symbols-alist '((insert . "+")
                                    (delete . "-")
                                    (change . "~")
                                    (unknown . "?")
                                    (ignored . "!")))
    :custom-face
    (diff-hl-change ((t (:foreground "#f5b041" :background unspecified :weight bold))))
    (diff-hl-delete ((t (:foreground "#ec7063" :background unspecified :weight bold))))
    (diff-hl-insert ((t (:foreground "#52be80" :background unspecified :weight bold))))
    (diff-hl-unknown ((t (:weight bold))))
    (diff-hl-ignored ((t (:weight bold))))
    :config
    (global-diff-hl-mode))
#+end_src

** ~dired~
#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :commands dired)
#+end_src

** ~display-line-number~
#+begin_src emacs-lisp
  (use-package display-line-numbers
    :ensure nil
    :commands (global-display-line-numbers-mode
               display-line-numbers-mode)
    :custom
    (display-line-numbers-current-absolute t)
    (display-line-numbers-grow-only t))
#+end_src

** ~eat~
#+begin_src emacs-lisp
  (use-package eat
    :commands (eat eat-project)
    :hook (eshell-load . eat-eshell-mode))
#+end_src

** ~eglot~
#+begin_src emacs-lisp
  (use-package eglot
    :hook ((bash-ts-mode . eglot-ensure)
           ((c-mode c++-mode) . eglot-ensure)
           (js-base-mode . eglot-ensure)
           (nix-mode . eglot-ensure)
           (python-base-mode . eglot-ensure)
           (rust-mode . eglot-ensure)
           (typst-mode . eglot-ensure))
    :custom
    (eglot-autoshutdown t)
    (eglot-workspace-configuration '(:nil (:formatting (:command ["nixpkgs-fmt"]))
                                          :nixd (:formatting (:command "nixpkgs-fmt"))))
    :config
    (add-to-list 'eglot-server-programs `(nix-mode
                                          . ,(eglot-alternatives '("nil" "nixd")))))
#+end_src

** ~eldoc~
#+begin_src emacs-lisp
  (use-package eldoc
    :ensure nil
    :custom
    (eldoc-echo-area-prefer-doc-buffer t))
#+end_src

** ~elec-pair~
#+begin_src emacs-lisp
  (use-package elec-pair
    :ensure nil
    :hook ((conf-mode . electric-pair-mode)
           (prog-mode . electric-pair-mode)))
#+end_src

** ~ellama~
#+begin_src emacs-lisp
  (use-package ellama)
#+end_src

** ~embark~
#+begin_src emacs-lisp
  (use-package embark
    :bind (("C-." . embark-act)
           ("C-;" . embark-dwim)
           ("C-h B" . embark-bindings)
           :map embark-collect-mode-map
           ("m" . embark-select)
           :map help-map
           ("C-h" . embark-prefix-help-command))
    :init
    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)
    ;; Show the Embark target at point via Eldoc.  You may adjust the Eldoc
    ;; strategy, if you want to see the documentation from multiple providers.
    (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
    ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)
    :config
    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))
#+end_src

** ~embark-consult~
#+begin_src emacs-lisp
  (use-package embark-consult
    :after (embark consult)
    :init
    (add-hook 'embark-collect-mode-hook #'consult-preview-at-point-mode))
#+end_src

** ~envrc~
#+begin_src emacs-lisp
  (use-package envrc
    :demand t
    :bind-keymap
    ("C-c e" . envrc-command-map)
    :config
    (envrc-global-mode))
#+end_src

** ~epg~
#+begin_src emacs-lisp
  (use-package epg
    :ensure nil
    :custom
    (epg-pinentry-mode 'loopback))
#+end_src

** ~eshell~
#+begin_src emacs-lisp
  (use-package eshell
    :ensure nil
    :commands eshell
    :init
    (add-hook 'eshell-mode-hook (lambda () (setq-local scroll-margin 0))))
#+end_src

** ~exec-path-from-shell~
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :if (daemonp)
    :config
    (exec-path-from-shell-initialize))
#+end_src

** ~expand-region~
#+begin_src emacs-lisp
  (use-package expand-region
    :bind ("C-=" . er/expand-region)
    :custom
    (expand-region-smart-cursor t))
#+end_src

** ~face-remap~
#+begin_src emacs-lisp
  (use-package face-remap
    :ensure nil
    :hook (org-mode . variable-pitch-mode))
#+end_src

** ~flyspell~
#+begin_src emacs-lisp
  (use-package flyspell
    :ensure nil
    :commands (flyspell-mode flyspell-prog-mode)
    :config
    (unbind-key "C-." flyspell-mode-map))
#+end_src

** ~helpful~
#+begin_src emacs-lisp
  (use-package helpful
    :bind (("C-h f" . helpful-callable)
           ("C-h v" . helpful-variable)
           ("C-h k" . helpful-key)
           ("C-h x" . helpful-command)
           ("C-c C-d" . helpful-at-point)
           ("C-h F" . helpful-function)))
#+end_src

** ~hl-line~
#+begin_src emacs-lisp
  (use-package hl-line
    :ensure nil
    :commands (hl-line-mode)
    :custom-face
    (hl-line ((t (:background "#f3f3ff")))))
#+end_src

** ~ibuffer~
#+begin_src emacs-lisp
  (use-package ibuffer
    :ensure nil
    :bind ("C-x C-b" . ibuffer))
#+end_src

** ~js~
#+begin_src emacs-lisp
  (use-package js
    :ensure nil
    :mode (("\\.js[mx]?\\'" . js-mode)
           ("\\.json\\'" . js-json-mode))
    :init
    (when (treesit-language-available-p 'javascript)
      (add-to-list 'major-mode-remap-alist '(js-mode . js-ts-mode)))
    (when (treesit-language-available-p 'json)
      (add-to-list 'major-mode-remap-alist '(js-json-mode . json-ts-mode))))
#+end_src

** ~julia-mode~
#+begin_src emacs-lisp
  (use-package julia-mode
    :mode "\\.jl\\'")
#+end_src

** ~just-mode~
#+begin_src emacs-lisp
  (use-package just-mode
    :mode ("/[Jj]ustfile\\'"
           "\\.[Jj]ust\\(file\\)?\\'"))
#+end_src

** ~kbd-mode~
#+begin_src emacs-lisp
  (use-package kbd-mode
    :ensure nil
    :mode "\\.kbd\\'")
#+end_src

** ~latex~
#+begin_src emacs-lisp
  (use-package latex
    :ensure nil
    :mode ("\\.tex\\'" . TeX-latex-mode)
    :init
    (setq-default TeX-engine 'luatex)
    (setq TeX-parse-self t
          TeX-auto-save t
          TeX-view-program-selection '((output-pdf "PDF Tools")))
    (setq LaTeX-electric-left-right-brace t))
#+end_src

** ~ligature~
#+begin_src emacs-lisp
  (use-package ligature
    :config
    (ligature-set-ligatures
     '(conf-mode prog-mode text-mode)
     '("<--" "<---" "<<-" "<-" "->" "->>" "-->" "--->"
       "<==" "<===" "<<=" "<=" "=>" "=>>" "==>" "===>" ">=" ">>="
       "<->" "<-->" "<--->" "<---->" "<=>" "<==>" "<===>" "<====>" "::" ":::" "__"
       "<~~" "</" "</>" "/>" "~~>" "==" "!=" "<>" "===" "!==" "!==="
       "<:" ":=" "*=" "*+" "<*" "<*>" "*>" "<|" "<|>" "|>" "+*" "=*" "=:" ":>"
       "/*" "*/" "[|" "|]" "++" "+++" "<!--" "<!---" ))
    ;; Enables ligature checks globally in all buffers. You can also do it
    ;; per mode with `ligature-mode'.
    (global-ligature-mode))
#+end_src

** ~markdown-mode~
#+begin_src emacs-lisp
  (use-package markdown-mode
    :mode (("\\.\\(?:md\\|markdown\\|mkd\\|mdown\\|mkdn\\|mdwn\\)\\'" . markdown-mode)
           ("README\\.md\\'" . gfm-mode)))
#+end_src

** ~magit~
#+begin_src emacs-lisp
  (use-package magit
    :after diff-hl
    :bind ("C-x g" . magit-status)
    :custom
    (magit-define-global-key-bindings nil)
    :init
    (setq transient-default-level 5))
#+end_src

** ~magit-extras~
#+begin_src emacs-lisp
  (use-package magit-extras
    :ensure magit
    :after project)
#+end_src

** ~marginalia~
#+begin_src emacs-lisp
  (use-package marginalia
    :config
    (marginalia-mode))
#+end_src

** ~midnight~
#+begin_src emacs-lisp
  (use-package midnight
    :ensure nil
    :config
    (add-to-list 'clean-buffer-list-kill-regexps "\\`\\*helpful ")
    (midnight-mode))
#+end_src

** ~modus-themes~
#+begin_src emacs-lisp
  (use-package modus-themes
    :custom
    (modus-themes-common-palette-overrides '((bg-line-number-active unspecified)
                                             (bg-line-number-inactive upspecified)
                                             (bg-mode-line-active unspecified)
                                             (bg-mode-line-inactive unspecified)
                                             (border-mode-line-active unspecified)
                                             (border-mode-line-inactive unspecified)
                                             (fringe unspecified)))
    (modus-themes-mixed-fonts t)
    :config
    (load-theme 'modus-operandi t))

  (use-package emacs
    :after modus-themes
    :custom-face
    (mode-line ((t (:overline "#000000"))))
    (mode-line-inactive ((t (:overline "#000000")))))
#+end_src

** ~mozc~
#+begin_src emacs-lisp
  (use-package mozc
    :commands mozc-mode
    :custom
    (mozc-candidate-style 'echo-area)
    :init
    (setq default-input-method "japanese-mozc")
    (global-set-key [zenkaku-hankaku] #'toggle-input-method)
    (prefer-coding-system 'utf-8))
#+end_src

** ~nerd-icons~
#+begin_src emacs-lisp
  (use-package nerd-icons
    :commands nerd-icons-insert
    :custom
    (nerd-icons-font-family "Iosevka Nerd Font"))
#+end_src

** ~nix-mode~
#+begin_src emacs-lisp
  (use-package nix-mode
    :mode "\\.nix\\'")
#+end_src

** ~nix-ts-mode~
Disabled until I figure out how to get indentation to work properly.
#+begin_src emacs-lisp
  (use-package nix-ts-mode
    :disabled
    :if (treesit-language-available-p 'nix)
    :commands nix-ts-mode
    :custom
    (nix-ts-mode-hook nix-mode-hook)
    :init
    (add-to-list 'major-mode-remap-alist '(nix-mode . nix-ts-mode)))
#+end_src

** ~olivetti~
#+begin_src emacs-lisp
  (use-package olivetti
    :commands olivetti-mode
    :init
    (add-hook 'ovlivetti-mode (lambda ()
                                (diff-hl-mode -1))))
#+end_src

** ~orderless~
#+begin_src emacs-lisp
  (use-package orderless
    :custom
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles . (partial-completion))))))
#+end_src

** ~org~
#+begin_src emacs-lisp
  (use-package org
    :bind (("C-c l" . org-store-link)
           ("C-c a" . org-agenda)
           ("C-c c" . org-capture)
           (:repeat-map org-heading-repeat-map
                        ("n" . org-next-visible-heading)
                        ("p" . org-previous-visible-heading)
                        ("f" . org-forward-heading-same-level)
                        ("b" . org-backward-heading-same-level)))
    :mode ("\\.org\\'" . org-mode)
    :custom
    (org-startup-with-inline-images t)
    (org-image-actual-width nil)
    (org-todo-keywords '((sequence "TODO" "|" "DONE" "CANCELLED")))
    (org-agenda-files '("~/Org"))

    (org-auto-align-tags nil)
    (org-tags-column 0)
    (org-catch-invisible-edits 'show-and-error)
    (org-special-ctrl-a/e t)
    (org-insert-heading-respect-content t)
    (org-hide-emphasis-markers t)
    (org-pretty-entities t)

    (org-agenda-tags-column 0)
    (org-agenda-block-separator ?-)
    (org-agenda-time-grid '((daily today require-timed)
                            (800 1000 1200 1400 1600 1800 2000)
                            " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄"))
    ;; org-babel
    (org-babel-load-languages '((emacs-lisp . t)
                                (haskell . t)
                                (julia . t)
                                (python . t)
                                (shell . t))))
#+end_src

** ~org-appear~
#+begin_src emacs-lisp
  (use-package org-appear
    :hook (org-mode . org-appear-mode)
    :custom
    (org-appear-autoemphasis t)
    (org-appear-autoentities t)
    (org-appear-autolinks t))
#+end_src

** ~org-modern~
#+begin_src emacs-lisp
  (use-package org-modern
    :disabled
    :hook (org-mode . org-modern-mode))
#+end_src

** ~org-reveal~
#+begin_src emacs-lisp
  (use-package ox-reveal
    :after org)
#+end_src

** ~paren~
#+begin_src emacs-lisp
  (use-package paren
    :ensure nil
    :hook ((conf-mode . show-paren-mode)
           (prog-mode . show-paren-mode)
           (text-mode . show-paren-mode))
    :init
    (setq show-paren-context-when-offscreen t))
#+end_src

** ~pdf-tools~
#+begin_src emacs-lisp
  (use-package pdf-tools
    :config
    (pdf-tools-install))
#+end_src

** ~pixel-scroll~
#+begin_src emacs-lisp
  (use-package pixel-scroll
    :ensure nil
    :config
    (pixel-scroll-precision-mode))
#+end_src

** ~project~
#+begin_src emacs-lisp
  (use-package project
    :ensure nil
    :custom
    (project-vc-extra-root-markers '(".dir-locals.el" "flake.nix")))
#+end_src

** ~python~
#+begin_src emacs-lisp
  (use-package python
    :ensure nil
    :mode ("\\.py[iw]?\\'" . python-mode)
    :init
    (when (treesit-language-available-p 'python)
      (add-to-list 'major-mode-remap-alist '(python-mode . python-ts-mode)))
    :custom
    (python-indent-guess-indent-offset-verbose nil))
#+end_src

** ~rainbow-mode~
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :commands rainbow-mode)
#+end_src

** ~recentf~
#+begin_src emacs-lisp
  (use-package recentf
    :ensure nil
    :config
    (recentf-mode))
#+end_src

** ~repeat~
#+begin_src emacs-lisp
  (use-package repeat
    :ensure nil
    :demand t
    :bind ((:repeat-map char-movement-repeat-map
                       ("f" . forward-char)
                       ("b" . backward-char))
           (:repeat-map word-movement-repeat-map
                        ("f" . forward-word)
                        ("b" . backward-word))
           (:repeat-map sexp-movement-repeat-map
                        ("f" . forward-sexp)
                        ("b" . backward-sexp))
           (:repeat-map line-navigation-repeat-map
                        ("n" . next-line)
                        ("p" . previous-line))
           (:repeat-map recenter-repeat-map
                        ("l" . recenter-top-bottom))
           (:repeat-map scroll-repeat-map
                        ("v" . scroll-up-command)
                        ("V" . scroll-down-command))
           (:repeat-map scroll-other-window-repeat-map
                        ("v" . scroll-other-window)
                        ("V" . scroll-other-window-down))
           (:repeat-map undo-redo-repeat-map
                        ("u" . undo)
                        ("r" . undo-redo))
           (:repeat-map isearch-repeat-map
                        ("s" . isearch-repeat-forward)
                        ("r" . isearch-repeat-backward)))
    :config
    ;; Unset `undo-repeat-map' before redefining it.
    (makunbound 'undo-repeat-map)

    (repeat-mode))
#+end_src

** ~rust-mode~
#+begin_src emacs-lisp
  (use-package rust-mode
    :mode "\\.rs\\'"
    :custom
    (rust-format-on-save t))
#+end_src

** ~rust-ts-mode~
#+begin_src emacs-lisp
  (use-package rust-ts-mode
    :if (treesit-language-available-p 'rust)
    :ensure nil
    :commands rust-ts-mode
    :init
    (add-to-list 'major-mode-remap-alist '(rust-mode . rust-ts-mode))
    :custom
    (rust-ts-mode-hook rust-mode-hook))
#+end_src

** ~savehist~
#+begin_src emacs-lisp
  (use-package savehist
    :ensure nil
    :config
    (savehist-mode))
#+end_src

** ~snow~
#+begin_src emacs-lisp
  (use-package snow
    :commands snow
    :custom-face
    (snow-flake ((t (:family "DejaVu Sans Mono")))))
#+end_src

** ~spacious-padding~
#+begin_src emacs-lisp
  (use-package spacious-padding
    :config
    (if (daemonp)
        (add-hook 'server-after-make-frame-hook #'spacious-padding-mode)
      (when (display-graphic-p)
        (spacious-padding-mode))))
#+end_src

** ~tempel~
#+begin_src emacs-lisp
  (use-package tempel
    :after cape
    :preface
    ;; Setup completion at point
    (defun tempel-setup-capf ()
      ;; Add the Tempel Capf to `completion-at-point-functions'.
      ;; `tempel-expand' only triggers on exact matches. Alternatively use
      ;; `tempel-complete' if you want to see all matches, but then you
      ;; should also configure `tempel-trigger-prefix', such that Tempel
      ;; does not trigger too often when you don't expect it. NOTE: We add
      ;; `tempel-expand' *before* the main programming mode Capf, such
      ;; that it will be tried first.
      (setq-local completion-at-point-functions
                  (cons #'tempel-expand
                        completion-at-point-functions)))
    :hook ((conf-mode . tempel-setup-capf)
           (prog-mode . tempel-setup-capf)
           (text-mode . tempel-setup-capf))
    :bind (("M-+" . tempel-complete) ;; Alternative tempel-expand
           ("M-*" . tempel-insert))
    :custom
    ;; Require trigger prefix before template name when completing.
    ;; (tempel-trigger-prefix "<")
    (tempel-path (expand-file-name "templates/*.eld" user-emacs-directory)))
#+end_src

** ~treesit~
#+begin_src emacs-lisp
  (use-package treesit
    :ensure nil
    :preface
    (defun my/treesit-install-grammars ()
      "install tree-sitter grammars"
      (interactive)
      (dolist (grammar
               '((bash . ("https://github.com/tree-sitter/tree-sitter-bash"))
                 (c . ("https://github.com/tree-sitter/tree-sitter-c"))
                 (cpp . ("https://github.com/tree-sitter/tree-sitter-cpp"))
                 (css . ("https://github.com/tree-sitter/tree-sitter-css"))
                 (javascript . ("https://github.com/tree-sitter/tree-sitter-javascript"))
                 (json . ("https://github.com/tree-sitter/tree-sitter-json"))
                 (nix . ("https://github.com/nix-community/tree-sitter-nix"))
                 (python . ("https://github.com/tree-sitter/tree-sitter-python"))
                 (rust . ("https://github.com/tree-sitter/tree-sitter-rust"))
                 (toml . ("https://github.com/ikatyang/tree-sitter-toml"))
                 (tsx . ("https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src"))
                 (typescript . ("https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src"))
                 (typst . ("https://github.com/uben0/tree-sitter-typst"))
                 (yaml . ("https://github.com/ikatyang/tree-sitter-yaml"))))
        (add-to-list 'treesit-language-source-alist grammar)
        (unless (treesit-language-available-p (car grammar))
          (treesit-install-language-grammar (car grammar)))))
    :config
    (unless (nixp)
      (my/treesit-install-grammars)))
#+end_src

** ~typst-mode~
#+begin_src emacs-lisp
  (use-package typst-mode
    :mode "\\.typ\\'")
#+end_src

** ~typst-ts-mode~
#+begin_src emacs-lisp
  (use-package typst-ts-mode
    :if (treesit-language-available-p 'typst)
    :ensure nil
    :commands typst-ts-mode
    :custom
    (typst-ts-mode-hook typst-mode-hook))
#+end_src

** ~vertico~
#+begin_src emacs-lisp
  (use-package vertico
    :custom
    (vertico-cycle t)
    :config
    (vertico-mode))
#+end_src

** ~vundo~
#+begin_src emacs-lisp
  (use-package vundo
    :commands vundo)
#+end_src

** ~web-mode~
#+begin_src emacs-lisp
  (use-package web-mode
    :mode ("\\.phtml\\'"
           "\\.tpl\\.php\\'"
           "\\.tpl\\'"
           "\\.hbs\\'"
           "\\.blade\\.php\\'"
           "\\.jsp\\'"
           "\\.as[cp]x\\'"
           "\\.erb\\'"
           "\\.html?\\'"
           "/\\(views\\|html\\|theme\\|templates\\)/.*\\.php\\'"))
#+end_src

** ~whitespace~
#+begin_src emacs-lisp
  (use-package whitespace
    :ensure nil
    :commands (whitespace-mode
               whitespace-cleanup)
    :custom
    (whitespace-display-mappings '((space-mark 32
                                               [183]
                                               [46])
                                   (space-mark 160
                                               [9085]
                                               [95])
                                   (newline-mark 10
                                                 [9166 10]
                                                 [36 10])
                                   (tab-mark 9
                                             [8594 9]
                                             [92 9]))))
#+end_src

** ~whitespace-cleanup-mode~
#+begin_src emacs-lisp
  (use-package whitespace-cleanup-mode
    :config
    (global-whitespace-cleanup-mode))
#+end_src

** ~yaml-mode~
#+begin_src emacs-lisp
  (use-package yaml-mode
    :mode "\\.ya?ml\\'")
#+end_src

** ~yaml-ts-mode~
#+begin_src emacs-lisp
  (use-package yaml-ts-mode
    :if (treesit-language-available-p 'yaml)
    :ensure nil
    :commands yaml-ts-mode
    :custom
    (yaml-ts-mode-hook yaml-mode-hook)
    :init
    (add-to-list 'major-mode-remap-alist '(yaml-mode . yaml-ts-mode)))
#+end_src

** ~yuck-mode~
#+begin_src emacs-lisp
  (use-package yuck-mode
    :mode ("\\.yuck\\'" . yuck-mode))
#+end_src
